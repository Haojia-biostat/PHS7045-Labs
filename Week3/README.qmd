---
title: "Lab 03 - Functions and data.table"
format:
  gfm:
    default
---

# Learning goals

- Used advanced features of functions in R.
- Use the `merge()` function to join two datasets.
- Deal with missings and data imputation data.
- Identify relevant observations using `quantile()`.
- Practice your GitHub skills.

# Lab description

For this lab, we will deal with the meteorological dataset downloaded from the NOAA, the `met`. We will use `data.table` to answer some questions regarding the `met` data set, and practice our Git+GitHub skills.

This markdown document should be rendered using `gfm` document.

# Part 1: Setup the Git project and the GitHub repository

1. Go to your documents (or wherever you are planning to store the data) in your computer, and create a folder for this project, for example, "PHS7045-labs"

2. In that folder, save [this template](https://raw.githubusercontent.com/UofUEpiBio/PHS7045-advanced-programming/main/labs/03-functions-and-datatable/03-functions-and-datatable.qmd) as "README.qmd." This will be the markdown file where all the magic will happen.

3. Go to your GitHub account and create a new repository, hopefully of the same name this folder has, i.e., "PHS7045-labs".

4. Initialize the Git project, add the "README.qmd" file, and make your first commit.

5. Add the repo you just created on GitHub.com to the list of remotes, and push your commit to `origin` while setting the upstream.

Most of the steps can be done using the command line:

```sh
# Step 1
cd ~/Documents
mkdir PHS7045-labs
cd PHS7045-labs

# Step 2
wget https://raw.githubusercontent.com/UofUEpiBio/PHS7045-advanced-programming/main/labs/03-functions-and-datatable/03-functions-and-datatable.qmd
mv 03-functions-and-datatable.qmd README.qmd

# Step 3
# Happens on github

# Step 4
git init
git add README.Rmd
git commit -m "First commit"

# Step 5
git remote add origin git@github.com:[username]/PHS7045
git push -u origin master
```

You can also complete the steps in R (replace with your paths/username when needed)

```r
# Step 1
setwd("~/Documents")
dir.create("PHS7045-labs")
setwd("PHS7045-labs")

# Step 2
download.file(
"https://raw.githubusercontent.com/UofUEpiBio/PHS7045-advanced-programming/main/labs/03-functions-and-datatable/03-functions-and-datatable.qmd",
destfile = "README.qmd"
)

# Step 3: Happens on Github

# Step 4
system("git init && git add README.Rmd")
system('git commit -m "First commit"')

# Step 5
system("git remote add origin git@github.com:[username]/PHS7045-labs")
system("git push -u origin master")
```

Once you are done setting up the project, you can now start working on the lab.

# Part 2: Advanced functions

## Question 1: **Ellipsis**

Write a function using the ellipsis argument (`...`) with the goal of (i) retrieving the list of arguments passed to it, (ii) printing information about them using `str()`, and (iii) printing the environment where they belong and the address of the object in memory using `data.table::address()`.

```{r}
get_ellips_arg <- function(...) {
  arguments <- list(...)
  lapply(arguments, str)
  # print(environment(arguments))
  lapply(arguments, \(x) print(data.table::address(x)))
  invisible()
}
get_ellips_arg(123, pi = pi)
```

Knit the document, commit your changes, and push them to GitHub.


## Question 2: **Lazy evaluation**

A concept we did not review was lazy evaluation. Write a function with two arguments (`a` and `b`)  that only uses one of them as an integer, and then call the function passing the following arguments `(1, this_stuff)`

```{r}
lazy_eval <- function(a, b) print(a)
lazy_eval(1, this_stuff)
```

Knit the document, commit your changes, and push them to GitHub.


## Question 3: **Putting all together**

Write a function that fits a linear regression model and saves the result to the global environment using the `assign()` function. The name of the output must be passed as a symbol using lazy evaluation.

```{r}
assign_fit <- function(x, y, fit_name = nobody_cares) {
  assign("fit", lm(y~x), envir = .GlobalEnv)
}
set.seed(7045)
y <- rnorm(100)
x <- runif(100)
assign_fit(x = x, y = y)
getAnywhere(fit)
```

Knit the document, commit your changes, and push them to GitHub.


# Part 3: Data.table

## Setup in R

1. Load the `data.table` (and the `dtplyr` and `dplyr` packages if you plan to work with those).

```{r}
#| label: load data.table
library(data.table)
```

2. Load the met data from https://raw.githubusercontent.com/USCbiostats/data-science-data/master/02_met/met_all.gz, and the station data. For the latter, you can use the code we used during the lecture to pre-process the stations' data:

```{r}
#| label: met data
met <- fread("https://raw.githubusercontent.com/USCbiostats/data-science-data/master/02_met/met_all.gz")
str(met)
```

```{r}
#| label: stations-data

# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]

# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]

# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE)])

# Dropping NAs
stations <- stations[!is.na(USAF)]

# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]

str(stations)
```

3. Merge the data as we did during the lecture.

```{r}
#| label: merge met and stations

# unique number of stations in met data
length(unique(met[,USAFID]))
# distribution of whether met stations present in stations data set
table(met[,USAFID] %in% stations[,USAF])

# left join two data sets
met <- merge(met, stations, by.x = "USAFID", by.y = "USAF", all.x = T)
head(met[, list(USAFID, WBAN, STATE)])
```

## Question 1: Representative station for the US

What is the median station in terms of temperature, wind speed, and atmospheric pressure? Look for the three weather stations that best represent the continental US using the `quantile()` function. Do these three coincide?

```{r}
weathers <- c("temp", "wind.sp", "atm.press")
# check the distribution of weathers
lapply(met[,..weathers], summary)
# calculate median of the weather conditions by station
med_weather_stations <- met[, lapply(.SD, median, na.rm = T), by = USAFID, .SDcols = weathers]
# calculate continental median
sapply(met[, ..weathers], quantile, probs = 0.5, na.rm = T)
# locate the station with the value closest to each of the medians
cat("The median station in terms of temperature is", med_weather_stations[which.min(abs(temp - 23.5)), USAFID], "\n")
cat("The median station in terms of wind speed is", med_weather_stations[which.min(abs(wind.sp - 2.1)), USAFID], "\n")
cat("The median station in terms of atmospheric pressure is", med_weather_stations[which.min(abs(atm.press - 1014.1)), USAFID], "\n")
```


Knit the document, commit your changes, and Save it on GitHub. Don't forget to add `README.md` to the tree, the first time you render it.

## Question 2: Representative station per state

Identify what the most representative (the median) station per state is. Instead of looking at one variable at a time, look at the euclidean distance. If multiple stations show in the median, select the one at the lowest latitude.

```{r}
# calculate the median of temperature, wind speed, and atmospheric pressure by state
med_weather_states <- met[, lapply(.SD, median, na.rm = T), by = STATE, .SDcols = weathers]
# check missingness in the state level data
colSums(is.na(med_weather_states))
# print the states with no measurements in atmosphere pressure
med_weather_states[is.na(atm.press), STATE]
# merge data to connect stations and states together
med_weather_states_stations <- 
  merge(med_weather_stations, stations, all.x = T, by.x = "USAFID", by.y = "USAF") |>
  merge(med_weather_states, by = "STATE", all.x = T, suffixes = c(".station", ".state"))
# check number of NA's in the merged data
colSums(is.na(med_weather_states_stations))
# wash out stations:
# if the state is not WA or ND, remove all the stations with any missing values
# else, remove the stations with missing values in temp or wind.sp
med_weather_states_stations <- na.omit(med_weather_states_stations, cols = c("temp.station", "wind.sp.station"))[is.na(atm.press.station) == is.na(atm.press.state),]
# function to calculate the euclidean distance between two points
eucd <- function(x,y) sqrt(sum((x-y)^2, na.rm = T))
# calculate euclidean distance
med_weather_states_stations$euc.dist <- 
  sapply(1:nrow(med_weather_states_stations), \(i) {
  eucd(
    x = med_weather_states_stations[i, 3:5] |> unlist(),
    y = med_weather_states_stations[i, 7:9] |> unlist()
    )
})
# locate the station closest to the median level
med_weather_states_stations[order(euc.dist), head(.SD, 1), by = STATE][, .(STATE, USAFID, euc.dist)]

```

Knit the doc and save it on GitHub.

## (optional) Question 3: In the middle?

For each state, identify the closest station to the mid-point of the state. Combining these with the stations you identified in the previous question, use `leaflet()` to visualize all ~100 points in the same figure, applying different colors for those identified in this question.

```{r}

```

Knit the doc and save it on GitHub.

## (optional) Question 4: Means of means

Using the `quantile()` function, generate a summary table that shows the number of states included, average temperature, wind speed, and atmospheric pressure by the variable "average temperature level," which you'll need to create. 

Start by computing the states' average temperature. Use that measurement to classify them according to the following criteria: 

- low: temp < 20
- Mid: temp >= 20 and temp < 25
- High: temp >= 25

```{r}

```

Once you are done with that, you can compute the following:

- Number of entries (records),
- Number of NA entries,
- Number of stations,
- Number of states included, and
- Mean temperature, wind speed, and atmospheric pressure.

All by the levels described before.

```{r}

```

Knit the document, commit your changes, and push them to GitHub. If you'd like, you can take this time to include the link of [the issue of the week](https://github.com/UofUEpiBio/PHS7045-advanced-programming/issues/5) so that you let us know when you are done, e.g.,

```bash
git commit -a -m "Finalizing lab 3 https://github.com/UofUEpiBio/PHS7045-advanced-programming/issues/5"
```


