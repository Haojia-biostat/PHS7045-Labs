---
title: "Lab 05 - Rcpp"
author: "Haojia Li"
format: 
  gfm: default
date: "`r Sys.Date()`"
---

# Learning goals

- Use the different data types in Rcpp.
- Learn some fundamentals about C++ optimization.
- Practice your GitHub skills.

# Lab description

For this lab, we will create a function for propensity score matching.
The goal is simple: write out a C++ function with Rcpp and measure
how faster it is compared to the following R implementation:


```{r}
ps_matchR <- function(x) {
  
  match_expected <- as.matrix(dist(x))
  diag(match_expected) <- .Machine$integer.max
  indices <- apply(match_expected, 1, which.min)
  
  list(
    match_id = as.integer(unname(indices)),
    match_x  = x[indices]
  )
  
}
```

## Question 1: Create a simple function

Use the following pseudo-code template to get started:

```{Rcpp}
#include <Rcpp.h>

using namespace Rcpp;

// [[Rcpp::export]]
List ps_match1(const NumericVector & x) {
  
  int n = x.size();
  
  IntegerVector indices(n);
  NumericVector values(n);
  
  for (int i = 0; i < n; ++i) {
    
    int best_n = 0;
    double best_dist = std::numeric_limits< double >::max();
    
    for (int j = 0; j < n; ++j) {
      
      if(i == j)
        continue;
      
      double tmp_dist = abs(x[i] - x[j]);
      if(tmp_dist < best_dist){
        
        best_dist = tmp_dist;
        best_n    = j;
        
      }
      
    }
    
    indices[i] = best_n;
    values[i] = x[best_n];
    
  }
  
  return List::create(
    _["match_id"] = indices,
    _["match_n"] = values
  );
  
}
```

```{r}
set.seed(7045)
x <- runif(10)
x
ps_matchR(x)
ps_match1(x)
```

In C++ the indices range from 0 to (n - 1), whereas in R is from 1 to n.

## Question 2: Things can be done faster

In the previous question, we have a double loop running twice over the full set
of observations. We need you to write the C++ so that the computational
complexity goes below `n^2`. (hint: Distance is symmetric)

```{Rcpp}
#include <Rcpp.h>

using namespace Rcpp;

// [[Rcpp::export]]
List ps_match2(const NumericVector & x) {
  
  int n = static_cast<int>(x.size());
  
  IntegerVector indices(n);
  NumericVector values(n);
  values.fill(std::numeric_limits< double >::max());
  
  for (int i = 0; i < n; ++i) {
    
    // Instead of allocating new memory, we can point by reference
    // (saves operations)
    double & cur_best = values[i]; 
    auto & cur_i    = indices[i];
    
    for (int j = 0; j < i; ++j) {
      
      // If it is lower, then update
      double d = std::abs(x[i] - x[j]);
      if (d < cur_best) {
        
        cur_best = d;
        cur_i    = j;
        
      }
      
      if (d < values[j]) {
        
        values[j] = d;
        indices[j] = i;
        
      }
      
    }
    
  }
  
  for (int i = 0; i < n; ++i) 
    values[i] = x[indices[i]];
  
  return List::create(
    _["match_id"] = indices + 1, // We add one to match R's indices
    _["match_x"]  = values 
  );
  
}
```
